from ldap3 import Server, Connection, ALL, SUBTREE, MODIFY_REPLACE, MODIFY_DELETE, MODIFY_ADD
import ssl

def change_password_admin(username, new_password):
    """Change password as admin for another user"""
    AD_SERVER = "172.16.30.142"
    AD_USER = "CN=Administrator,CN=Users,DC=idmtdc,DC=com"
    AD_PASSWORD = "Passw0rd!"
    AD_SEARCH_BASE = "DC=idmtdc,DC=com"

    # Connect to AD server
    server = Server(AD_SERVER, port=389, get_info=ALL)
    conn = Connection(
        server,
        user=AD_USER,
        password=AD_PASSWORD,
        authentication='SIMPLE',
        auto_bind=True
    )

    try:
        # Find user DN
        search_filter = f'(&(objectClass=user)(sAMAccountName={username}))'
        conn.search(
            AD_SEARCH_BASE,
            search_filter,
            search_scope=SUBTREE,
            attributes=['distinguishedName']
        )

        if len(conn.entries) == 0:
            raise Exception(f"User {username} not found")

        user_dn = conn.entries[0].distinguishedName.value

        # Encode new password in UTF-16LE format with quotes
        new_password_value = f'"{new_password}"'.encode('utf-16-le')

        # Admin changing user password
        changes = {
            'unicodePwd': [(MODIFY_REPLACE, [new_password_value])]
        }

        if conn.modify(user_dn, changes):
            print(f"Password changed successfully for {username}")
            return True
        else:
            print(f"Failed to change password: {conn.result}")
            return False

    except Exception as e:
        print(f"Error changing password: {str(e)}")
        return False
    finally:
        conn.unbind()

def change_password_self(username, old_password, new_password):
    """User changing their own password"""
    AD_SERVER = "172.16.30.142" 
    AD_SEARCH_BASE = "DC=idmtdc,DC=com"

    # Connect to AD server
    server = Server(AD_SERVER, port=389, get_info=ALL)
    
    # User connects with their own credentials
    user_dn = f"CN={username},CN=Users,DC=idmtdc,DC=com"
    conn = Connection(
        server,
        user=user_dn,
        password=old_password,
        authentication='SIMPLE',
        auto_bind=True
    )

    try:
        # Encode both passwords in UTF-16LE format with quotes
        old_password_value = f'"{old_password}"'.encode('utf-16-le')
        new_password_value = f'"{new_password}"'.encode('utf-16-le')

        # User changing own password requires delete old + add new
        changes = {
            'unicodePwd': [
                (MODIFY_DELETE, [old_password_value]),
                (MODIFY_ADD, [new_password_value])
            ]
        }

        if conn.modify(user_dn, changes):
            print(f"Password changed successfully for {username}")
            return True
        else:
            print(f"Failed to change password: {conn.result}")
            return False

    except Exception as e:
        print(f"Error changing password: {str(e)}")
        return False
    finally:
        conn.unbind()

if __name__ == "__main__":
    # Example usage:
    # Admin changing user password
    change_password_admin("Michael.Heilman", "A2d*hu")
    
    # User changing own password
    # change_password_self("test.user", "OldPassword123!", "NewPassword123!")
